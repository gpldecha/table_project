<launch>
	<arg name="gui" default="False" />
	<arg name="controller" default="OneTaskInverseKinematics" />	
	<arg name="stopped_controllers" default="" />
	
	<arg name="use_lwr_sim" default="true"/>
	<arg name="use_rviz" default="true"/>
	<arg name="robot_name" default="lwr_table"/>


	<param name="robot_description" command="$(find xacro)/xacro.py '$(find table_world)/urdf/table_world.xacro'" />
	<param name="use_gui" value="$(arg gui)"/>

	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<rosparam param="source_list">[/lwr/joint_states]</rosparam>
	</node>

	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

	<!-- load controller -->
	<include file="$(find lwr_controllers)/launch/load_controller.launch">
		<arg name="controller" value="$(arg controller)" />
		<arg name="stopped_controllers" value="$(arg stopped_controllers)" />
	</include>

	<group if="$(arg use_rviz)">
		<node name="rviz" pkg="rviz" type="rviz" args="-d $(find table_world)/launch/table_world.rviz" required="true" />
	</group>

	<group if="$(arg use_lwr_sim)">
		<!-- spawn the robot in gazebo -->
		<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name)"  respawn="false" output="screen" />

		<!-- enable/disable gui at will, the rviz listens to the simulation -->
		<include file="$(find gazebo_ros)/launch/empty_world.launch">
			<arg name="world_name" value="$(find lwr_description)/worlds/simple_environment.world"/>
			<arg name="paused" value="false"/>
			<arg name="use_sim_time" value="true"/>
			<arg name="gui" value="true"/>
			<arg name="headless" value="false"/>
			<arg name="debug" value="false"/>
		</include>

	</group>
	<!--group unless="$(arg use_lwr_sim)">
		<include file="$(find lwr_hw)/launch/lwr_hw.launch">
			<arg name="port" value="$(arg port)"/>
			<arg name="ip" value="$(arg ip)"/>
		</include>
	</group-->



	<!-- Launch lwr_listener -->
	<node name="lwr_listener" pkg="lwr_listener" type="lwr_listener" respawn="true" />

	<!-- Launch Planner server node -->
	<node name="planner" pkg="planner" type="planner_server" respawn="true" />



</launch>
